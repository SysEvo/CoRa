DissimMatrix[i,j] <- mean((curve1 - curve2)**2)
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(DissimMatrix)
}
DissimMat2 <- SquDistances(CoRas)
DissimMat2
DPFreDistances <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
colnames(DissimMatrix) <- colnames(frame)
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
path1 <- as.matrix(DouglasPeuckerEpsilon(path1[,1], path1[,2], epsilon = 0.01))
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
path2 <- as.matrix(DouglasPeuckerEpsilon(path2[,1], path2[,2], epsilon = 0.01))
DissimMatrix[i,j] <- Frechet(path1, path2)
#print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(DissimMatrix)
}
DPDissimMatrix <- DPFreDistances(CoRas[,c(1, 3:18, 20:25)])
head(DPDissimMatrix)
DPFreDistances <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
colnames(DissimMatrix) <- colnames(frame)
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
path1 <- as.matrix(DouglasPeuckerEpsilon(path1[,1], path1[,2], epsilon = 0.01))
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
path2 <- as.matrix(DouglasPeuckerEpsilon(path2[,1], path2[,2], epsilon = 0.01))
DissimMatrix[i,j] <- Frechet(path1, path2)
print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(DissimMatrix)
}
DPDissimMatrix <- DPFreDistances(CoRas)
head(DPDissimMatrix)
test1dat <- matrix(c(1:length(CoRas[,1][is.finite(CoRas[,1])]), CoRas[,1][is.finite(CoRas[,1])]), length(CoRas[,1][is.finite(CoRas[,1])]), byrow = F)
head(test1dat)
as.matrix(DouglasPeuckerEpsilon(test1dat[,1], test1dat[,2], epsilon = 0.01))
DPuwu <- pam(DPDissimMatrix, diss = T, k = 3)
plot(DPuwu)
plot(hclust(as.dist(DPDissimMatrix), method = "average"))
View(DPDissimMatrix)
DPuwu <- pam(DPDissimMatrix, diss = T, k = 5)
plot(DPuwu)
plot(hclust(as.dist(DPDissimMatrix), method = "average"))
View(CoRas)
knitr::opts_chunk$set(echo = TRUE)
testline <- rep(1, 601)
testline <- matrix(c(rep(1, 601), 1:601), byrow = F, ncol = 2)
testline <- matrix(c(rep(1, 601), 1:601), byrow = F, ncol = 2)
head(testline)
View(test1dat)
View(testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
Frechet(test1dat, testline)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(cluster)
library(SimilarityMeasures)
library(kmlShape)
set.seed(160396)
setwd("C:/Users/Lenovo/Documents/CoRa/InputFiles/")
generate <- function(rows){
g <- sample(seq(from = 0.0001, to = 1, by = 0.00001), rows)
mY <- rep(0.125, rows)
gY <- sample(seq(from = 0.01, to = 100, by = 0.001), rows)
mU <- sample(seq(from = 0.00125, to = 12.5, by = 0.000125), rows)
gU <- sample(seq(from = 0.000001, to = 0.01, by = 0.0000001), rows)
mW <- sample(seq(from = 0.001, to = 10, by = 0.0001), rows)
gW <- sample(seq(from = 0.000001, to = 0.01, by = 0.0000005), rows)
e0 <- sample(seq(from = 0.000001, to = 0.01, by = 0.0000005), rows)
eP <- sample(seq(from = 0.000375, to = 3.75, by = 0.0000375), rows)
eM <- sample(seq(from = 0.005, to = 50, by = 0.0005), rows)
mUs <- rep(NaN, rows)
csv <- data.frame(g, mY, gY, mU, gU, mW, gW, e0, eP, eM, mUs)
return(csv)
}
write.csv(generate(100), file = "ARGS_ATFv2_Mass_Par_Fig2B.csv", row.names = FALSE)
setwd("C:/Users/Lenovo/Documents/CoRa/")
CoRas <- as.data.frame(t(read.table(file = "OUT_ExSSs_ATFv2_Fig2B_mY_mY.txt", header = T)))
CoRas <- CoRas[2:nrow(CoRas),]
CoRas[CoRas > 1] <- NaN
colnames(CoRas) <- paste0("Attempt", 1:ncol(CoRas))
Graphing <- tidyr::gather(CoRas)
# test$value[test$value>1] <- NaN
Graphing$step <- rep(1:nrow(CoRas), ncol(CoRas))
a <- ggplot(data = Graphing, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none")
a
FreDistances <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
DissimMatrix[i,j] <- Frechet(path1, path2)
print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(DissimMatrix)
}
DissimMat <- FreDistances(CoRas[,1:6])
DissimMat
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
Frechet(test1dat, testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
#Frechet(test1dat, testline)
DouglasPeuckerEpsilon(testline[,1], testline[,2], epsilon = 0.01)
Frechet(dest1dat, testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
#Frechet(test1dat, testline)
DouglasPeuckerEpsilon(testline[,1], testline[,2], epsilon = 0.01)
Frechet(test1dat, testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
#Frechet(test1dat, testline)
testline <- DouglasPeuckerEpsilon(testline[,1], testline[,2], epsilon = 0.01)
Frechet(test1dat, testline)
View(testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
#Frechet(test1dat, testline)
testline <- as.matrix(DouglasPeuckerEpsilon(testline[,1], testline[,2], epsilon = 0.01))
Frechet(test1dat, testline)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
withoutDP <- Frechet(test1dat, testline)
testline <- as.matrix(DouglasPeuckerEpsilon(testline[,1], testline[,2], epsilon = 0.01))
withDP <- Frechet(test1dat, testline)
Error <- (withoutDP - withDP) / withoutDP
Error
View(FreDistances)
View(FreDistances)
testline <- matrix(c(1:601, rep(1, 601)), byrow = F, ncol = 2)
head(testline)
#withoutDP <- Frechet(test1dat, testline)
testline <- as.matrix(DouglasPeuckerEpsilon(testline[,1], testline[,2], epsilon = 0.01))
#withDP <- Frechet(test1dat, testline)
Error <- (withoutDP - withDP)
Error
knitr::opts_chunk$set(echo = TRUE)
ErrorCheck <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
DissimMatrixUnsimp <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
colnames(DissimMatrix) <- colnames(frame)
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
path1unsimp <- path1
path1 <- as.matrix(DouglasPeuckerEpsilon(path1[,1], path1[,2], epsilon = 0.01))
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
path2 <- as.matrix(DouglasPeuckerEpsilon(path2[,1], path2[,2], epsilon = 0.01))
DissimMatrix[i,j] <- Frechet(path1, path2)
DissimMatrixUnsimp[i,j] <- Frechet(path1unsimp, path2)
print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(c(DissimMatrix, DissimMatrixUnsimp))
}
ErrorCheck <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
DissimMatrixUnsimp <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
colnames(DissimMatrix) <- colnames(frame)
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
path1unsimp <- path1
path1 <- as.matrix(DouglasPeuckerEpsilon(path1[,1], path1[,2], epsilon = 0.01))
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
path2 <- as.matrix(DouglasPeuckerEpsilon(path2[,1], path2[,2], epsilon = 0.01))
DissimMatrix[i,j] <- Frechet(path1, path2)
DissimMatrixUnsimp[i,j] <- Frechet(path1unsimp, path2)
print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
DissimMatrixUnsimp[lower.tri(DissimMatrixUnsimp)] <- t(DissimMatrixUnsimp)[lower.tri(DissimMatrixUnsimp)]
ErrorMat <- (DissimMatrixUnsimp - DissimMatrix) / DissimMatrixUnsimp
return(ErrorMat)
}
ErrorCheck <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
DissimMatrixUnsimp <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
colnames(DissimMatrix) <- colnames(frame)
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
path1unsimp <- path1
path1 <- as.matrix(DouglasPeuckerEpsilon(path1[,1], path1[,2], epsilon = 0.01))
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
path2 <- as.matrix(DouglasPeuckerEpsilon(path2[,1], path2[,2], epsilon = 0.01))
DissimMatrix[i,j] <- Frechet(path1, path2)
print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
DissimMatrixUnsimp[i,j] <- Frechet(path1unsimp, path2)
print(paste0("Fréchet distance between unsimplified curve ", i, " and curve ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
DissimMatrixUnsimp[lower.tri(DissimMatrixUnsimp)] <- t(DissimMatrixUnsimp)[lower.tri(DissimMatrixUnsimp)]
ErrorMat <- (DissimMatrixUnsimp - DissimMatrix) / DissimMatrixUnsimp
return(ErrorMat)
}
Error <- ErrorCheck(CoRas[,1:10])
library(ggplot2)
library(tidyr)
library(cluster)
library(SimilarityMeasures)
library(kmlShape)
Error <- ErrorCheck(CoRas[,1:10])
View(Error)
max(Error)
max(is.finite(Error))
max(Error[is.finite(Error)])
max(Error[is.finite(Error)])
CoRas[,c(5, 8)]
max(Error[is.finite(Error)])
CoRas[,5] - CoRas[,8]
max(Error[is.finite(Error)])
(CoRas[,5] - CoRas[,8])/CoRas[,5])
max(Error[is.finite(Error)])
(CoRas[,5] - CoRas[,8])/CoRas[,5]
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(cluster)
library(SimilarityMeasures)
library(kmlShape)
Error <- ErrorCheck(CoRas)
View(Error)
mean(Error)
mean(Error[is.finite(NaN)])
Error[is.finite(NaN)]
Error[1,]
mean(Error[,1])
Error[,1][is.finite(Error[,1])]
mean(Error[,1][is.finite(Error[,1])])
max(Error[,1][is.finite(Error[,1])])
min(Error[,1][is.finite(Error[,1])])
min(Error[1,][is.finite(Error[1,])])
max(Error[is.finite(Error)])
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
knitr::opts_chunk$set(echo = TRUE)
ErrorColMeans <- c()
for (i in 1:ncol(Error)){
ErrorColMeans[i] <- mean(Error[,i][is.finite(Error[,i])])
}
ErrorColMeans <- c()
for (i in 1:ncol(Error)){
ErrorColMeans[i] <- mean(Error[,i][is.finite(Error[,i])])
}
plot(ErrorColMeans)
ErrorColMeans <- c()
for (i in 1:ncol(Error)){
ErrorColMeans[i] <- mean(Error[,i][is.finite(Error[,i])])
}
ErrorColMeans
ErrorColMeans <- c()
for (i in 1:ncol(Error)){
ErrorColMeans[i] <- mean(Error[,i][is.finite(Error[,i])])
}
mean(ErrorColMeans)
View(Error)
mean(abs(Error))
mean(abs(Error[is.finite(Error)]))
max(Error)
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
plot(Error)
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
plot(Error[1,])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
plot(Error[2,])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
plot(Error[3,])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
var(Error)
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
var(Error[is.finite(Error)])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
var(Error[1,][is.finite(Error[1,])])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
max(Error[is.finite(Error)])
min(Error[is.finite(Error)])
mean(Error[is.finite(Error)])
sd(Error[1,][is.finite(Error[1,])])
#write.csv(Error, file = "Error_Matrix_Seed_160396.csv")
as.vector(Error)
plot(as.vector(Error))
plot(as.vector(abs(Error)))
plot(as.vector(abs(Error)))
Error[which(Error <= 50)]
plot(as.vector(abs(Error)))
(length(Error) - length(Error[which(Error <= 50)])) / length(Error)
plot(as.vector(abs(Error)))
mean(Error[which(Error <= 50)])
plot(as.vector(abs(Error)))
mean(abs(Error[which(Error <= 50)]))
plot(as.vector(abs(Error)))
plot(as.vector(abs(Error[which(Error <= 50)])))
Error[which(abs(Error) <= 50)]
plot(abs(Error[which(abs(Error) <= 50)]))
mean(abs(Error[which(abs(Error) <= 50)]))
View(a)
View(a)
View(DPuwu)
View(testline)
View(test1dat)
View(Graphing)
View(Error)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(cluster)
library(SimilarityMeasures)
library(kmlShape)
set.seed(0507)
setwd("C:/Users/ese_1/Documents/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
set.seed(0507)
setwd("C:/Users/ese_1/Documents/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
set.seed(0507)
setwd("C:/Users/ese_1/Documents/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
set.seed(0507)
setwd("C:\\Users\\ese_1\\Documents\\CoRa\\InputFiles\\") #Cambiar a carpeta relevante dependiendo de computadora
setwd("~/CoRa/InputFiles")
set.seed(0507)
setwd("C:/Usuarios/ese_1/Documents/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
set.seed(0507)
setwd("C:/Usuarios/ese_1/OneDrive/Documents/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
set.seed(0507)
setwd("C:/Usuarios/ese_1/OneDrive/Documentos/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
set.seed(0507)
setwd("C:/Users/ese_1/OneDrive/Documentos/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
write.csv(generate(10), file = "ARGS_ATFv2_Mass_Par_TestingSimplification.csv", row.names = FALSE)
set.seed(0507)
setwd("C:/Users/ese_1/OneDrive/Documentos/CoRa/InputFiles/") #Cambiar a carpeta relevante dependiendo de computadora
write.csv(generate(10), file = "ARGS_ATFv2_Mass_Par_TestingSimplification.csv", row.names = FALSE)
setwd("C:/Users/Lenovo/Documents/CoRa/")
setwd("C:/Users/ese_1/OneDrive/Documentos/CoRa/")
CoRas <- as.data.frame(t(read.table(file = "OUT_ExSSs_ATFv2_TestingSimplification_mY_mY.txt", header = T)))
CoRas <- CoRas[2:nrow(CoRas),]
CoRas[CoRas > 1] <- NaN
colnames(CoRas) <- paste0("Attempt", 1:ncol(CoRas))
Graphing <- tidyr::gather(CoRas)
Graphing$step <- rep(1:nrow(CoRas), ncol(CoRas))
a <- ggplot(data = Graphing, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none")
a
setwd("C:/Users/ese_1/OneDrive/Documentos/CoRa/")
CoRas <- as.data.frame(t(read.table(file = "OUT_ExSSs_ATFv2_TestingSimplification_mY_mY.txt", header = T)))
CoRas <- CoRas[2:nrow(CoRas),]
CoRas[CoRas > 1] <- NaN
colnames(CoRas) <- paste0("Attempt", 1:ncol(CoRas))
Graphing <- tidyr::gather(CoRas)
Graphing$step <- rep(1:nrow(CoRas), ncol(CoRas))
a <- ggplot(data = Graphing, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none")
a
generate <- function(rows){
g <- sample(seq(from = 0.0001, to = 1, by = 0.00001), rows)
mY <- rep(0.125, rows)
gY <- sample(seq(from = 0.01, to = 100, by = 0.001), rows)
mU <- sample(seq(from = 0.00125, to = 12.5, by = 0.000125), rows)
gU <- sample(seq(from = 0.000001, to = 0.01, by = 0.0000001), rows)
mW <- sample(seq(from = 0.001, to = 10, by = 0.0001), rows)
gW <- sample(seq(from = 0.000001, to = 0.01, by = 0.0000005), rows)
e0 <- sample(seq(from = 0.000001, to = 0.01, by = 0.0000005), rows)
eP <- sample(seq(from = 0.000375, to = 3.75, by = 0.0000375), rows)
eM <- sample(seq(from = 0.005, to = 50, by = 0.0005), rows)
mUs <- rep(NaN, rows)
csv <- data.frame(g, mY, gY, mU, gU, mW, gW, e0, eP, eM, mUs)
return(csv)
}
FreDistances <- function(frame){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
DissimMatrix[i,j] <- Frechet(path1, path2)
print(paste0("Fréchet distance between curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(DissimMatrix)
}
DPFreDistances <- function(frame, Epsi){
DissimMatrix <- matrix(0, ncol = ncol(frame), nrow = ncol(frame))
colnames(DissimMatrix) <- colnames(frame)
for(i in 1:ncol(frame)){
path1dat <- frame[,i][is.finite(frame[,i])]
path1 <- matrix(c(1:length(path1dat), path1dat), length(path1dat), byrow = F)
path1 <- as.matrix(DouglasPeuckerEpsilon(path1[,1], path1[,2], epsilon = Epsi))
for(j in i:ncol(frame)){
if(i == j){
DissimMatrix[i,j] <- 0
}else{
path2dat <- frame[,j][is.finite(frame[,j])]
path2 <- matrix(c(1:length(path2dat), path2dat), length(path2dat), byrow = F)
path2 <- as.matrix(DouglasPeuckerEpsilon(path2[,1], path2[,2], epsilon = Epsi))
DissimMatrix[i,j] <- Frechet(path1, path2)
print(paste0("Fréchet distance between simplified curves ", i, " and ", j, " calculated"))
}
}
}
DissimMatrix[lower.tri(DissimMatrix)] <- t(DissimMatrix)[lower.tri(DissimMatrix)]
return(DissimMatrix)
}
ErrorMat <- function(frame, control, Epsi){
Unsimplified <- control
Simplified <- DPFreDistances(frame, Epsi)
ErrorMatrix <- abs(((Simplified - Unsimplified) / Unsimplified))
return(ErrorMatrix)
}
ErrorCheck <- function(ErrorMatrix, Epsi){
Maximum_Error <- max(ErrorMatrix[is.finite(ErrorMatrix)])
Average_Error <- mean(ErrorMatrix[is.finite(ErrorMatrix)])
Minimum_Error <- min(ErrorMatrix[is.finite(ErrorMatrix)])
SD_of_Error <- sd(ErrorMatrix[is.finite(ErrorMatrix)])
Summary <- data.frame(Maximum_Error, Average_Error, Minimum_Error, SD_of_Error, Epsi)
return(Summary)
}
Reference <- FreDistances(CoRas)
gc()
