temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(temp)
#return(sigbeh(data[,temp]))
}
unu <- uwuwu(CoRas, names(a[[1]]))
unu
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a)})
return(signaturebehaviour)
}
uwuwu <- function(data, names){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(temp)
#return(sigbeh(data[,temp]))
}
unu <- uwuwu(CoRas, names(a[[1]]))
CoRas[,unu]
subset(CoRas, select = unu)
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a)})
return(signaturebehaviour)
}
uwuwu <- function(data, names){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(sigbeh(subset(data, select = temp)))
}
(CoRas, names(a[[1]]))
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a)})
return(signaturebehaviour)
}
uwuwu <- function(data, names){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(sigbeh(subset(data, select = temp)))
}
uwuwu(CoRas, names(a[[1]]))
sigbeh <- function(values){
print(values)
signaturebehaviour <- apply(values, 1, function(a){mean(a)})
return(signaturebehaviour)
}
uwuwu <- function(data, names){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(sigbeh(subset(data, select = temp)))
}
uwuwu(CoRas, names(a[[1]]))
sigbeh <- function(values){
print(values)
signaturebehaviour <- apply(values, 1, function(a){mean(a, na.rm = TRUE)})
return(signaturebehaviour)
}
uwuwu <- function(data, names){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(sigbeh(subset(data, select = temp)))
}
uwuwu(CoRas, names(a[[1]]))
clustergraphslist[[18]]
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a, na.rm = TRUE)})
return(signaturebehaviour)
}
uwuwu <- function(data, names){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
temp <- unique(temp)
return(sigbeh(subset(data, select = temp)))
}
uwuwu(CoRas, names(a[[1]]))
clustergraphslist[[2]]
knitr::opts_chunk$set(echo = TRUE)
ClusterContent <- function(data, ClusNum, Cluster, samplesize){
AllMotifs <- unique(str_extract(colnames(CoRas), regex("[A-Z]+v?[1-9]?")))
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Members_by_Motif <- str_extract(unique(Partial$key), regex("[A-Z]+v?[1-9]?"))
Count <- c(rep(0, length(AllMotifs)))
for(i in 1:length(unique(AllMotifs))){
Count[i] <- sum(Members_by_Motif == unique(AllMotifs)[i])
}
names(Count) <- unique(AllMotifs)
Plotting <- data.frame(names(Count), Count, row.names = NULL)
colnames(Plotting) <- c("Motif", "Count")
Plotting <- Plotting %>%
arrange(desc(Motif)) %>%
mutate(prop = Count / sum(Plotting$Count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop)
ggplot(Plotting, aes(x = "", y = prop, fill=Motif)) + geom_bar(stat = "identity", width = 1, colour = "white") + coord_polar("y", start = 0) + theme_void() + ggtitle(paste0("Cluster ", ClusNum, " composition, ", samplesize, " sample for Clustering")) + geom_text(aes(y = ypos, label = paste0(round(prop, 1), "%")), color = "white", size=5)
}
ClusterContent(CoRas, 1, ClusterWholeK, "30%")
library(stringr)
library(cluster)
library(ggplot2)
library(ggdendro)
library(seriation)
library(dplyr)
ClusterContent <- function(data, ClusNum, Cluster, samplesize){
AllMotifs <- unique(str_extract(colnames(CoRas), regex("[A-Z]+v?[1-9]?")))
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Members_by_Motif <- str_extract(unique(Partial$key), regex("[A-Z]+v?[1-9]?"))
Count <- c(rep(0, length(AllMotifs)))
for(i in 1:length(unique(AllMotifs))){
Count[i] <- sum(Members_by_Motif == unique(AllMotifs)[i])
}
names(Count) <- unique(AllMotifs)
Plotting <- data.frame(names(Count), Count, row.names = NULL)
colnames(Plotting) <- c("Motif", "Count")
Plotting <- Plotting %>%
arrange(desc(Motif)) %>%
mutate(prop = Count / sum(Plotting$Count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop)
ggplot(Plotting, aes(x = "", y = prop, fill=Motif)) + geom_bar(stat = "identity", width = 1, colour = "white") + coord_polar("y", start = 0) + theme_void() + ggtitle(paste0("Cluster ", ClusNum, " composition, ", samplesize, " sample for Clustering")) + geom_text(aes(y = ypos, label = paste0(round(prop, 1), "%")), color = "white", size=5)
}
ClusterContent(CoRas, 1, ClusterWholeK, "30%")
#ClusterContent(CoRas, 6, ClusterWholeK, "30%")
#ClusterContent(CoRas, 12, ClusterWholeK, "20%")
ClusterContent <- function(data, ClusNum, Cluster, samplesize){
AllMotifs <- unique(str_extract(colnames(CoRas), regex("[A-Z]+v?[1-9]?")))
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Members_by_Motif <- str_extract(unique(Partial$key), regex("[A-Z]+v?[1-9]?"))
Count <- c(rep(0, length(AllMotifs)))
for(i in 1:length(unique(AllMotifs))){
Count[i] <- sum(Members_by_Motif == unique(AllMotifs)[i])
}
names(Count) <- unique(AllMotifs)
Plotting <- data.frame(names(Count), Count, row.names = NULL)
colnames(Plotting) <- c("Motif", "Count")
Plotting <- Plotting %>%
arrange(desc(Motif)) %>%
mutate(prop = Count / sum(Plotting$Count) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop)
ggplot(Plotting, aes(x = "", y = prop, fill=Motif)) + geom_bar(stat = "identity", width = 1, colour = "white") + coord_polar("y", start = 0) + theme_void() + ggtitle(paste0("Cluster ", ClusNum, " composition, ", samplesize, " sample for Clustering")) + geom_text(aes(y = ypos, label = paste0(round(prop, 1), "%")), color = "white", size=5)
}
ClusterContent(CoRas, 7, ClusterWholeK, "30%")
#ClusterContent(CoRas, 6, ClusterWholeK, "30%")
#ClusterContent(CoRas, 12, ClusterWholeK, "20%")
ClusterGraphing <- function(data, ClusNum, Cluster, title){
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(data[, names(Cluster[which(Cluster == ClusNum)])]))
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
}
ClusterGraphing(CoRas, 1, ClusterWholeK, "Cluster 7 according to AllxAll Clustering, 30% subsample for Clustering")
#ClusterGraphing(CoRas, 6, ClusterWholeK, "Cluster 6 according to AllxAll Clustering, 30% subsample for Clustering")
ClusterGraphing <- function(data, ClusNum, Cluster, title){
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(data[, names(Cluster[which(Cluster == ClusNum)])]))
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
}
ClusterGraphing(CoRas, 7, ClusterWholeK, "Cluster 7 according to AllxAll Clustering, 30% subsample for Clustering")
#ClusterGraphing(CoRas, 6, ClusterWholeK, "Cluster 6 according to AllxAll Clustering, 30% subsample for Clustering")
ClusterGraphing <- function(data, ClusNum, Cluster, title){
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(data[, names(Cluster[which(Cluster == ClusNum)])]))
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
}
ClusterGraphing(CoRas, 12, ClusterWholeK, "Cluster 7 according to AllxAll Clustering, 30% subsample for Clustering")
ClusterGraphing <- function(data, ClusNum, Cluster, title){
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(data[, names(Cluster[which(Cluster == ClusNum)])]))
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
}
ClusterGraphing(CoRas, 10, ClusterWholeK, "Cluster 7 according to AllxAll Clustering, 30% subsample for Clustering")
#ClusterGraphing(CoRas, 6, ClusterWholeK, "Cluster 6 according to AllxAll Clustering, 30% subsample for Clustering")
ClusterGraphing <- function(data, ClusNum, Cluster, title){
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(data[, names(Cluster[which(Cluster == ClusNum)])]))
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
}
ClusterGraphing(CoRas, 5, ClusterWholeK, "Cluster 7 according to AllxAll Clustering, 30% subsample for Clustering")
#ClusterGraphing(CoRas, 6, ClusterWholeK, "Cluster 6 according to AllxAll Clustering, 30% subsample for Clustering")
ClusterGraphing <- function(data, ClusNum, Cluster, title){
Partial = tidyr::gather(data[, names(Cluster[which(Cluster == ClusNum)])])
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(data[, names(Cluster[which(Cluster == ClusNum)])]))
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
}
ClusterGraphing(CoRas, 5, ClusterWholeK, "Cluster 7 according to AllxAll Clustering, 30% subsample for Clustering")
#ClusterGraphing(CoRas, 6, ClusterWholeK, "Cluster 6 according to AllxAll Clustering, 30% subsample for Clustering")
knitr::opts_chunk$set(echo = TRUE)
sigbehgraphs[[1]]
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a, na.rm = TRUE)})
return(signaturebehaviour)
}
ClusterClusterGraphing <- function(data, names, sigbehplotting, title){
Partial = tidyr::gather(subset(data, select = names))
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(subset(data, select = names)))
Sigbeh <- data.frame(sigbehplotting, seq(from = 0, to = 0.01, by = 1/60000))
colnames(Sigbeh) <- c("value", "step")
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5, alpha = 0.35) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
b + geom_line(data = Sigbeh, aes(x = step, y = value), col = "black", size = 1.5)
}
sigbehgraph <- function(data, names, title){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
sigbeh <- sigbeh(subset(data, select = temp))
ClusterClusterGraphing(data, temp, sigbeh, title)
}
signaturebehaviours <- function(data, list){
temp <- list()
for(i in 1:length(list)){
temp[[i]] <- sigbehgraph(data, names(list[[i]]), paste0("Signature Behaviour of C.Cluster ", i))
}
return(temp)
}
sigbehgraphs <- signaturebehaviours(CoRas, a)
library(stringr)
library(cluster)
library(ggplot2)
library(ggdendro)
library(seriation)
library(dplyr)
setwd("D:/CoRa")
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a, na.rm = TRUE)})
return(signaturebehaviour)
}
ClusterClusterGraphing <- function(data, names, sigbehplotting, title){
Partial = tidyr::gather(subset(data, select = names))
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(subset(data, select = names)))
Sigbeh <- data.frame(sigbehplotting, seq(from = 0, to = 0.01, by = 1/60000))
colnames(Sigbeh) <- c("value", "step")
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5, alpha = 0.35) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
b + geom_line(data = Sigbeh, aes(x = step, y = value), col = "black", size = 1.5)
}
sigbehgraph <- function(data, names, title){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
sigbeh <- sigbeh(subset(data, select = temp))
ClusterClusterGraphing(data, temp, sigbeh, title)
}
signaturebehaviours <- function(data, list){
temp <- list()
for(i in 1:length(list)){
temp[[i]] <- sigbehgraph(data, names(list[[i]]), paste0("Signature Behaviour of C.Cluster ", i))
}
return(temp)
}
sigbehgraphs <- signaturebehaviours(CoRas, a)
sigbehgraphs[[1]]
sigbehgraphs[[2]]
sigbehgraphs[[3]]
sigbehgraphs[[4]]
sigbehgraphs[[5]]
sigbehgraphs[[6]]
sigbehgraphs[[7]]
sigbehgraphs[[8]]
sigbehgraphs[[9]]
sigbehgraphs[[10]]
sigbehgraphs[[11]]
sigbehgraphs[[12]]
sigbehgraphs[[13]]
sigbehgraphs[[14]]
sigbehgraphs[[15]]
sigbehgraphs[[16]]
sigbehgraphs[[17]]
sigbehgraphs[[18]]
sigbehgraphs[[19]]
sigbehgraphs[[20]]
maxdist <- 60
plot(dendro)
a <- rect.hclust(dendro, h = maxdist)
maxdist <- 75
plot(dendro)
a <- rect.hclust(dendro, h = maxdist)
RepetitionAndClusterGraphing <- function(data, name){
Repetition <- str_extract(name, regex("[0-9]+"))
Cluster <- str_extract(name, regex("[0-9]+$"))
if(Repetition == "1"){
ClusterGraphing(data, Cluster, Wholekr1pam$clustering, paste0("Cluster ", Cluster, " of Repeat ", Repetition))
}else if(Repetition == "3"){
ClusterGraphing(data, Cluster, Wholekr3pam$clustering, paste0("Cluster ", Cluster, " of Repeat ", Repetition))
}else if(Repetition == "5"){
ClusterGraphing(data, Cluster, Wholekr5pam$clustering, paste0("Cluster ", Cluster, " of Repeat ", Repetition))
}else if(Repetition == "6"){
ClusterGraphing(data, Cluster, Wholekr6pam$clustering, paste0("Cluster ", Cluster, " of Repeat ", Repetition))
}else if(Repetition == "9"){
ClusterGraphing(data, Cluster, Wholekr9pam$clustering, paste0("Cluster ", Cluster, " of Repeat ", Repetition))
}else{
ClusterGraphing(data, Cluster, Wholekr10pam$clustering, paste0("Cluster ", Cluster, " of Repeat ", Repetition))
}
}
clusqrGraphing <- function(data, clusqr){
temp <- list()
index <- 1
for(i in clusqr){
temp[[index]] <- RepetitionAndClusterGraphing(CoRas, i)
index <- index + 1
}
return(temp)
}
megafunction <- function(data, clusqrlist){
temp <- list()
index <- 1
for(i in clusqrlist){
temp[[index]] <- clusqrGraphing(data, names(i))
index <- index + 1
}
return(temp)
}
clustergraphslist <- megafunction(CoRas, a)
sigbeh <- function(values){
signaturebehaviour <- apply(values, 1, function(a){mean(a, na.rm = TRUE)})
return(signaturebehaviour)
}
ClusterClusterGraphing <- function(data, names, sigbehplotting, title){
Partial = tidyr::gather(subset(data, select = names))
Partial$step <- rep(seq(from = 0, to = 0.01, by = 1/60000), ncol(subset(data, select = names)))
Sigbeh <- data.frame(sigbehplotting, seq(from = 0, to = 0.01, by = 1/60000))
colnames(Sigbeh) <- c("value", "step")
b <- ggplot(data = Partial, aes(x = step, y = value, col = key)) + geom_line(size = 1.5, alpha = 0.35) + theme(legend.position = "none") + ylab(expression(paste("CoRa"[mu[Y]%in%theta], "("*mu[Y],")"))) + ggtitle(title)
b + theme(plot.title = element_text(size = 32), axis.title.y = element_text(size = 32), axis.title.x = element_text(size = 32)) + theme(axis.text = element_text(size = 20)) + ylim(0, 1)
b + geom_line(data = Sigbeh, aes(x = step, y = value), col = "black", size = 1.5)
}
sigbehgraph <- function(data, names, title){
temp <- c()
for(i in names){
Repetition <- str_extract(i, regex("[0-9]+"))
Cluster <- str_extract(i, regex("[0-9]+$"))
if(Repetition == "1"){
temp <- append(temp, names(Wholekr1pam$clustering[which(Wholekr1pam$clustering == Cluster)]))
}else if(Repetition == "3"){
temp <- append(temp, names(Wholekr3pam$clustering[which(Wholekr3pam$clustering == Cluster)]))
}else if(Repetition == "5"){
temp <- append(temp, names(Wholekr5pam$clustering[which(Wholekr5pam$clustering == Cluster)]))
}else if(Repetition == "6"){
temp <- append(temp, names(Wholekr6pam$clustering[which(Wholekr6pam$clustering == Cluster)]))
}else if(Repetition == "9"){
temp <- append(temp, names(Wholekr9pam$clustering[which(Wholekr9pam$clustering == Cluster)]))
}else{
temp <- append(temp, names(Wholekr10pam$clustering[which(Wholekr10pam$clustering == Cluster)]))
}
}
sigbeh <- sigbeh(subset(data, select = temp))
ClusterClusterGraphing(data, temp, sigbeh, title)
}
signaturebehaviours <- function(data, list){
temp <- list()
for(i in 1:length(list)){
temp[[i]] <- sigbehgraph(data, names(list[[i]]), paste0("Signature Behaviour of C.Cluster ", i))
}
return(temp)
}
sigbehgraphs <- signaturebehaviours(CoRas, a)
sigbehgraphs[[1]]
sigbehgraphs[[2]]
sigbehgraphs[[3]]
sigbehgraphs[[4]]
sigbehgraphs[[5]]
sigbehgraphs[[6]]
sigbehgraphs[[7]]
sigbehgraphs[[8]]
sigbehgraphs[[9]]
sigbehgraphs[[10]]
sigbehgraphs[[11]]
sigbehgraphs[[12]]
sigbehgraphs[[13]]
sigbehgraphs[[14]]
sigbehgraphs[[15]]
sigbehgraphs[[16]]
sigbehgraphs[[17]]
sigbehgraphs[[18]]
#sigbehgraphs[[19]]
#sigbehgraphs[[20]]
